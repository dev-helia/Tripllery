"""
preview.py ¬∑ Tripllery V3 Route: /preview

This route finalizes a full day-by-day, time-aligned schedule
based on the rough day-to-POI plan and a set of time configuration options.

It ensures all required scheduling parameters are present, applies default
fallbacks for optional fields, and invokes the `build_full_schedule` generator
to produce a final trip timeline ‚Äî including meal slots, wake/return time, and transport time.

Main Use Case:
--------------
Called after rough plan is accepted. Transforms LLM-split days into real-world time schedule.
Frontend ‚ûú POST to `/preview`.

Key Features:
-------------
‚úÖ Validates all required fields  
‚úÖ Handles meal options and optional time windows  
‚úÖ Delegates full timeline building to schedule builder  
‚úÖ Returns a complete, frontend-displayable day-by-day timeline  

Author: Tripllery AI Backend
"""

from quart import Blueprint, request, jsonify
from services.preview.builder import build_full_schedule

preview_bp = Blueprint("preview", __name__)

@preview_bp.route("/preview", methods=["POST"])
async def generate_preview():
    """
    Endpoint: POST /preview

    Receives:
        - plan: Dict[day ‚Üí POIs]  ‚Üê generated by /plan
        - options: Dict[str, Any] ‚Üê config used during plan generation

    Returns:
        JSON:
            {
              "Day 1": [
                {"type": "Meal", "time": "09:00", "label": "Breakfast"},
                {"type": "Sightseeing", "time": "10:00", "poi": {...}},
                ...
              ],
              ...
            }
    """
    try:
        data = await request.get_json()

        rough_plan = data.get("plan")
        options = data.get("options")

        if not rough_plan or not isinstance(rough_plan, dict):
            return jsonify({"error": "Missing or invalid rough plan."}), 400
        if not options or not isinstance(options, dict):
            return jsonify({"error": "Missing or invalid options."}), 400

        # ‚úÖ Required fields for schedule logic
        required_fields = [
            "start_time_of_day", "avg_poi_duration", "avg_transport_time",
            "lunch_time", "flexible_block", "transportation",
            "start_datetime", "end_datetime"
        ]
        missing_fields = [field for field in required_fields if field not in options]
        if missing_fields:
            return jsonify({"error": f"Options missing fields: {missing_fields}"}), 400

        # ‚úÖ Meals fallback
        meal_options = options.get("meal_options") or {
            "include_breakfast": True,
            "include_lunch": True,
            "include_dinner": True
        }

        # ‚úÖ Optional wake-up / return times
        wake_up_time = options.get("wake_up_time")
        return_time = options.get("return_time")

        # ‚úÖ Compose schedule config
        schedule_options = {
            **options,
            "meal_options": meal_options,
            "wake_up_time": wake_up_time,
            "return_time": return_time
        }

        # ‚úÖ Run timeline builder
        full_schedule = await build_full_schedule(rough_plan, schedule_options)

        return jsonify(full_schedule)

    except Exception as e:
        print("üí• PREVIEW ERROR (detailed):", repr(e))
        return jsonify({"error": str(e)}), 500
